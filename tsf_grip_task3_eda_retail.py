# -*- coding: utf-8 -*-
"""TSF_GRIP_Task3_EDA_Retail.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yABvnDcMeDyXTe3t0TmT-PTysXNLDNSZ

Name: Niharika Choudhari

Domain: Data Science & Business Analytics

Task: Exploratory Data Analysis (Retail)

Batch: April 2023

Company: The Sparks Foundation (TSF)
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
# %matplotlib inline

# import the superstore dataset
superstore_df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/SampleSuperstore.csv")

superstore_df

superstore_df.shape

superstore_df.duplicated().sum()

newsuperstore = superstore_df.drop_duplicates()
newsuperstore

newsuperstore.info()

superstore_df.columns

superstore_df.isnull().sum()

superstore_df['Category'].unique()

superstore_df['Sub-Category'].unique()

superstore_df['State'].unique()

superstore_df['Ship Mode'].unique()

superstore_df['Segment'].value_counts()

superstore_df['Category'].value_counts()

superstore_df['Sub-Category'].value_counts()

superstore_df['Ship Mode'].value_counts()

#Create a loss dataframe
loss_df = newsuperstore[newsuperstore['Profit'] < 0]
loss_df

total_loss = np.negative(loss_df['Profit'].sum())
total_loss

loss_df.groupby(by = 'Segment').sum()

loss_df['Sub-Category'].value_counts()

#Sub-Category Analysis
from operator import sub
subcat_analysis = superstore_df.groupby(['Sub-Category'])[['Sales', 'Profit']].sum()

subcat_sales = subcat_analysis.sort_values('Sales', ascending = False)
subcat_sales

subcat_profit = subcat_analysis.sort_values('Profit', ascending = False)
subcat_profit

#bar plots
sns.set_theme(style = "whitegrid")

# set grouped plots
figure, axis = plt.subplots(1,2, figsize = (12,6))

#plot bar plot for best selling sub-category
subcat1 = sns.barplot(data = subcat_sales, x = subcat_sales.index, y = subcat_sales.Sales, ax = axis[0])
subcat1.set(title = "Best selling Sub-Category")
subcat1.set_xticklabels(subcat1.get_xticklabels(), rotation = "vertical", size = 10)

#plot bar plot for most profitable sub-category
subcat2 = sns.barplot(data = subcat_profit, x = subcat_profit.index, y = subcat_profit.Profit, ax=axis[1])
subcat2.set(title = "Most Profitable Sub-Category")
subcat2.set_xticklabels(subcat2.get_xticklabels(), rotation = "vertical", size = 10)

#set spacing between the plots
figure.tight_layout()
plt.show()

loss_df.groupby(by = 'Sub-Category').sum().sort_values(by = 'Profit', ascending = True)

"""It can be seen that more **loss** is incurred by **Binders**, **Machines**, **Tables**. The sales of Binders are more and discount is highest. Hence decreasing the discount on Binders and discounting other items which are sold less will increase sales and profits."""

loss_df.groupby(by = 'City').sum().sort_values(by = 'Profit', ascending = True).head(15)

"""The above table shows the top 15 cities where the loss is highest."""

#Sales in the top 10 cities - most selling
city_sales = newsuperstore.groupby(by = 'City')['Sales', 'Quantity'].sum().sort_values(by = 'Sales', ascending = False)
most_sales = city_sales[:10]
most_sales

"""The above table shows the top 10 cities where the sales were maximum."""

#Least selling cities
least_sales = city_sales[-10:]
least_sales

"""The above table shows the top 10 cities where the sales were minimum."""

#set grouped plots
figure, axis = plt.subplots(1,2, figsize = (12,5))
sns.set_theme(style = "whitegrid")
top_cities = sns.barplot(data = most_sales, y = most_sales.index, x = most_sales.Sales, palette = "coolwarm", ax = axis[0])
top_cities.set(title = "Top 10 cities with highest sales")
top_cities.set_yticklabels(top_cities.get_yticklabels(), size = 10)

#barplot for best selling sub-category
bottom_cities = sns.barplot(data = least_sales, y = least_sales.index, x = least_sales.Sales, palette = "coolwarm", ax = axis[1])
bottom_cities.set(title = "Bottom 10 cities with lowest sales")
bottom_cities.set_yticklabels(bottom_cities.get_yticklabels(), size = 10)

#Spacing between subplots
figure.tight_layout()
plt.show()

#Category Analysis 
category_analysis = superstore_df.groupby(by = 'Category').sum()

#set grouped plots
sns.set_theme(style = 'whitegrid')
figure, axis = plt.subplots(1,3, figsize = (8,5))
#Plot barplots
cat1 = sns.barplot(x = category_analysis.index, y = category_analysis.Sales, ax = axis[0])
cat2 = sns.barplot(x = category_analysis.index, y = category_analysis.Profit, ax = axis[1])
cat3 = sns.barplot(x = category_analysis.index, y = category_analysis.Quantity, ax = axis[2])

#set titles
cat1.set(title = 'Sales')
cat2.set(title = 'Profit')
cat3.set(title = 'Quantity')

#rotate axis
plt.setp(cat1.get_xticklabels(), rotation = 'vertical', size = 9)
plt.setp(cat2.get_xticklabels(), rotation = 'vertical', size = 9)
plt.setp(cat3.get_xticklabels(), rotation = 'vertical', size = 9)

#spacing between the plots
figure.tight_layout()

"""The observations from the above barplots are: **Technology** is the **best selling and profitable category**. **Office supplies** are **stable** in terms of sales, profit, quantity sold."""

#Sub-Category Analysis in terms of Quantity
subcat_quantity = superstore_df.groupby(['Sub-Category'])[['Quantity']].sum().sort_values('Quantity', ascending = False)
subcat_quantity

#bar plot for top selling Sub-Category
sns.set_theme(style = "whitegrid")
sns.barplot(data = subcat_quantity, y = subcat_quantity.index, x = subcat_quantity.Quantity, palette = 'muted')
plt.title("Top selling Sub-Category")
plt.show()

"""After looking at the barplot, Superstore should keep its stock updated for **Binders, Paper, Furnishings and Phones** as they are the most well sold items."""

loss_df.sort_values(by = 'Sales', ascending = True).groupby(by = 'Category').mean()

"""After calculating the average, it can be seen that **Technology Category** has seen more loss out of all the categories."""

superstore_df.sort_values(['Segment'], ascending = True).groupby('Segment').sum()

"""From the above table, it is seen that the **Consumer Segment** of the Superstore has the **lowest sales** but the **highest profits**. By increasing the sales in this Segment, profits can increase."""

#Regional Analysis
regional_analysis = superstore_df.groupby(by = 'Region')['Profit'].sum().reset_index()
regional_analysis

#plot pie chart
explode = [0,0,0,0.1]
plt.pie(regional_analysis.Profit, labels = regional_analysis.Region, startangle = 90, autopct = "%1.0f%%", explode = explode)
plt.title("Most profitable region")
plt.show()

"""The **East and West** regions are the most **profitable** regions for Superstore.

**Business Recommendations:**

1. Consumer and Corporate Segment make up for more than 70% of the customerbase. Target them, especially customers from the East and West region in the Top 10 cities with Highest Sales by introducing special promotions for mass Consumers and Home Offices.

2. For loss-making products like Supplies, Bookcases, Tables, consider to either drop these from the catalogue or change suppliers and bargain for cheaper price.

3. Selling Bookcases and Tables result in huge losses, so Super Store can consider to bundle them together with High Selling or Profitable sub-category such as Chairs, Copiers, Phones and Office Supplies products.
"""